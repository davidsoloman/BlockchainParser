package de.reemo.blockchain.namecoin;

import static org.junit.Assert.*;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Map;

import org.junit.Test;

import de.reemo.blockchain.BlockInputStreamReader;

public class NameOperationTest {

	byte[] testScript = new byte[] { 81, 20, -26, -77, 67, 76, 9, 105, -110,
			48, 113, -126, -17, -3, -10, -45, -88, -59, -48, -86, -58, 113,
			109, 118, -87, 20, 28, 6, -79, 124, 28, -58, -69, -109, -44, -12,
			-90, 47, -7, 104, 21, 75, -103, -63, -72, 94, -120, -84 };

	@Test
	public void test() {
		Map<Byte, String> optostring = Script.opcodes;
	}
	
	@Test
	public void decryptThisShit() throws IOException {
		BlockInputStreamReader reader = new BlockInputStreamReader(new ByteArrayInputStream(testScript));
		byte magicValue = (byte) reader.readUInt8();
		assertEquals((byte)magicValue, (byte)Script.OP_NAME_NEW);
		
		
	}

	
	@Test
	public void decryptThis()  {
		byte[] foo = new byte[]{(byte)0x52, (byte)0x0e, (byte)0x64, (byte)0x2f, (byte)0x61, (byte)0x6d, (byte)0x65, (byte)0x72, (byte)0x69, (byte)0x63, (byte)0x61, (byte)0x6e, (byte)0x67, (byte)0x69, (byte)0x72, (byte)0x6c, (byte)0x08, (byte)0x50, (byte)0x8e, (byte)0xa8, (byte)0xef, (byte)0x2f, (byte)0x73, (byte)0x91, (byte)0x46, (byte)0x4c, (byte)0x99, (byte)0x7b, (byte)0x22, (byte)0x65, (byte)0x6d, (byte)0x61, (byte)0x69, (byte)0x6c, (byte)0x22, (byte)0x20, (byte)0x3a, (byte)0x20, (byte)0x22, (byte)0x63, (byte)0x65, (byte)0x6e, (byte)0x67, (byte)0x65, (byte)0x6c, (byte)0x62, (byte)0x72, (byte)0x61, (byte)0x63, (byte)0x68, (byte)0x74, (byte)0x40, (byte)0x68, (byte)0x6f, (byte)0x74, (byte)0x6d, (byte)0x61, (byte)0x69, (byte)0x6c, (byte)0x2e, (byte)0x63, (byte)0x6f, (byte)0x6d, (byte)0x22, (byte)0x2c, (byte)0x20, (byte)0x22, (byte)0x69, (byte)0x6e, (byte)0x66, (byte)0x6f, (byte)0x22, (byte)0x20, (byte)0x3a, (byte)0x20, (byte)0x22, (byte)0x50, (byte)0x61, (byte)0x72, (byte)0x6b, (byte)0x65, (byte)0x64, (byte)0x44, (byte)0x6f, (byte)0x6d, (byte)0x61, (byte)0x69, (byte)0x6e, (byte)0x73, (byte)0x22, (byte)0x2c, (byte)0x20, (byte)0x22, (byte)0x6d, (byte)0x61, (byte)0x70, (byte)0x22, (byte)0x3a, (byte)0x20, (byte)0x7b, (byte)0x20, (byte)0x22, (byte)0x22, (byte)0x20, (byte)0x3a, (byte)0x20, (byte)0x7b, (byte)0x20, (byte)0x22, (byte)0x22, (byte)0x3a, (byte)0x20, (byte)0x22, (byte)0x70, (byte)0x61, (byte)0x72, (byte)0x6b, (byte)0x65, (byte)0x64, (byte)0x64, (byte)0x6f, (byte)0x6d, (byte)0x61, (byte)0x69, (byte)0x6e, (byte)0x73, (byte)0x2e, (byte)0x79, (byte)0x6f, (byte)0x6c, (byte)0x61, (byte)0x73, (byte)0x69, (byte)0x74, (byte)0x65, (byte)0x2e, (byte)0x63, (byte)0x6f, (byte)0x6d, (byte)0x22, (byte)0x20, (byte)0x7d, (byte)0x7d, (byte)0x7d, (byte)0x5d, (byte)0x2c, (byte)0x22, (byte)0x65, (byte)0x72, (byte)0x72, (byte)0x6f, (byte)0x72, (byte)0x22, (byte)0x3a, (byte)0x6e, (byte)0x75, (byte)0x6c, (byte)0x6c, (byte)0x2c, (byte)0x22, (byte)0x69, (byte)0x64, (byte)0x22, (byte)0x3a, (byte)0x22, (byte)0x50, (byte)0x61, (byte)0x72, (byte)0x6b, (byte)0x65, (byte)0x64, (byte)0x44, (byte)0x6f, (byte)0x6d, (byte)0x61, (byte)0x69, (byte)0x6e, (byte)0x73, (byte)0x22, (byte)0x7d, (byte)0x6d, (byte)0x6d, (byte)0x76, (byte)0xa9, (byte)0x14, (byte)0x41, (byte)0x05, (byte)0xed, (byte)0xb5, (byte)0xcc, (byte)0xde, (byte)0x19, (byte)0x07, (byte)0x72, (byte)0x8b, (byte)0xf3, (byte)0xce, (byte)0x4b, (byte)0xce, (byte)0xfa, (byte)0xb4, (byte)0x45, (byte)0xa2, (byte)0x36, (byte)0x0a, (byte)0x88, (byte)0xac};
		
		assertEquals("Hallo Welt", Script.scriptToString(foo));
	}
}
